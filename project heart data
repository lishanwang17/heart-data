{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "08b16e44",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from pylab import mpl\n",
    "mpl.rcParams['font.sans-serif'] = ['SimHei'] \n",
    "mpl.rcParams['axes.unicode_minus'] = False  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1934a51a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 303 entries, 0 to 302\n",
      "Data columns (total 14 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       303 non-null    int64  \n",
      " 1   sex       303 non-null    int64  \n",
      " 2   cp        303 non-null    int64  \n",
      " 3   trestbps  303 non-null    int64  \n",
      " 4   chol      303 non-null    int64  \n",
      " 5   fbs       303 non-null    int64  \n",
      " 6   restecg   303 non-null    int64  \n",
      " 7   thalach   303 non-null    int64  \n",
      " 8   exang     303 non-null    int64  \n",
      " 9   oldpeak   303 non-null    float64\n",
      " 10  slope     303 non-null    int64  \n",
      " 11  ca        303 non-null    int64  \n",
      " 12  thal      303 non-null    int64  \n",
      " 13  target    303 non-null    int64  \n",
      "dtypes: float64(1), int64(13)\n",
      "memory usage: 33.3 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "      <td>303.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.366337</td>\n",
       "      <td>0.683168</td>\n",
       "      <td>0.966997</td>\n",
       "      <td>131.623762</td>\n",
       "      <td>246.264026</td>\n",
       "      <td>0.148515</td>\n",
       "      <td>0.528053</td>\n",
       "      <td>149.646865</td>\n",
       "      <td>0.326733</td>\n",
       "      <td>1.039604</td>\n",
       "      <td>1.399340</td>\n",
       "      <td>0.729373</td>\n",
       "      <td>2.313531</td>\n",
       "      <td>0.544554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.082101</td>\n",
       "      <td>0.466011</td>\n",
       "      <td>1.032052</td>\n",
       "      <td>17.538143</td>\n",
       "      <td>51.830751</td>\n",
       "      <td>0.356198</td>\n",
       "      <td>0.525860</td>\n",
       "      <td>22.905161</td>\n",
       "      <td>0.469794</td>\n",
       "      <td>1.161075</td>\n",
       "      <td>0.616226</td>\n",
       "      <td>1.022606</td>\n",
       "      <td>0.612277</td>\n",
       "      <td>0.498835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>47.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>211.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>133.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>274.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age         sex          cp    trestbps        chol         fbs  \\\n",
       "count  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \n",
       "mean    54.366337    0.683168    0.966997  131.623762  246.264026    0.148515   \n",
       "std      9.082101    0.466011    1.032052   17.538143   51.830751    0.356198   \n",
       "min     29.000000    0.000000    0.000000   94.000000  126.000000    0.000000   \n",
       "25%     47.500000    0.000000    0.000000  120.000000  211.000000    0.000000   \n",
       "50%     55.000000    1.000000    1.000000  130.000000  240.000000    0.000000   \n",
       "75%     61.000000    1.000000    2.000000  140.000000  274.500000    0.000000   \n",
       "max     77.000000    1.000000    3.000000  200.000000  564.000000    1.000000   \n",
       "\n",
       "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
       "count  303.000000  303.000000  303.000000  303.000000  303.000000  303.000000   \n",
       "mean     0.528053  149.646865    0.326733    1.039604    1.399340    0.729373   \n",
       "std      0.525860   22.905161    0.469794    1.161075    0.616226    1.022606   \n",
       "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%      0.000000  133.500000    0.000000    0.000000    1.000000    0.000000   \n",
       "50%      1.000000  153.000000    0.000000    0.800000    1.000000    0.000000   \n",
       "75%      1.000000  166.000000    1.000000    1.600000    2.000000    1.000000   \n",
       "max      2.000000  202.000000    1.000000    6.200000    2.000000    4.000000   \n",
       "\n",
       "             thal      target  \n",
       "count  303.000000  303.000000  \n",
       "mean     2.313531    0.544554  \n",
       "std      0.612277    0.498835  \n",
       "min      0.000000    0.000000  \n",
       "25%      2.000000    0.000000  \n",
       "50%      2.000000    1.000000  \n",
       "75%      3.000000    1.000000  \n",
       "max      3.000000    1.000000  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/Users/wanglishan/Desktop/pythonProject1/heart.csv')\n",
    "df.info()\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f8d04d3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'disease/notdisease.rate')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#target\n",
    "df.target.value_counts()\n",
    "sns.countplot(x='target',data=df,palette=\"muted\")\n",
    "plt.xlabel(\"disease/notdisease.rate\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1716b7a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Sex (0 = female, 1= male)')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUS0lEQVR4nO3dfbRddX3n8feHgDgWURguTAZwgkygRQfDeE1Vxg4UW7GrFXTEgaEaLWPQivWp01E7U1mdYS2nFFmOLTixpkCX8qBIxRltTVlUdFWFG0VIiFSe1EgmuUirdGDRlfCdP86+m5NwbnIT7jn7Juf9Wuuss/dv//be30Mu53P2c6oKSZIA9uu6AEnSwmEoSJJahoIkqWUoSJJahoIkqbV/1wU8HYcddlgtWbKk6zIkaa+ydu3ah6pqYtC0vToUlixZwtTUVNdlSNJeJcn3Z5vm7iNJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUmuvvqJZ2pdtufx3ui5BC9Dhb/+DoS7fLQVJUstQkCS1DAVJUmtooZDk6CQ3J9mQZH2SdzXthyZZk+R7zfshffN8IMk9Se5O8qph1SZJGmyYWwpbgfdV1c8BLwXekeQE4P3ATVW1FLipGaeZdjbwAuB04LIki4ZYnyRpB0MLharaVFXfaoYfATYARwJnAFc23a4EzmyGzwCuqarHq+p+4B5g+bDqkyQ91UiOKSRZApwEfBM4oqo2QS84gMObbkcCP+ybbWPTtuOyViaZSjI1PT091LoladwMPRSSHARcD7y7qn66s64D2uopDVWrqmqyqiYnJgY+TU6StIeGGgpJDqAXCJ+qqs81zZuTLG6mLwa2NO0bgaP7Zj8KeHCY9UmStjfMs48CfBLYUFUf6Zt0I7CiGV4BfL6v/ewkByY5BlgK3Dqs+iRJTzXM21ycDLwRuDPJ7U3bB4EPA9clOQ/4AXAWQFWtT3IdcBe9M5feUVXbhlifJGkHQwuFqvoag48TAJw2yzwXARcNqyZJ0s55RbMkqWUoSJJahoIkqWUoSJJahoIkqWUoSJJahoIkqWUoSJJahoIkqWUoSJJahoIkqWUoSJJahoIkqWUoSJJahoIkqWUoSJJaw3wc5+okW5Ks62u7NsntzeuBmSeyJVmS5LG+aR8fVl2SpNkN83GcVwB/BFw101BV/35mOMklwE/6+t9bVcuGWI8kaReG+TjOW5IsGTQtSYA3AL84rPVLknZfV8cUXgFsrqrv9bUdk+TbSb6S5BWzzZhkZZKpJFPT09PDr1SSxkhXoXAOcHXf+CbgeVV1EvBe4NNJDh40Y1WtqqrJqpqcmJgYQamSND5GHgpJ9gdeB1w701ZVj1fVj5vhtcC9wHGjrk2Sxl0XWwqvBL5bVRtnGpJMJFnUDD8fWArc10FtkjTWhnlK6tXA14Hjk2xMcl4z6Wy233UE8AvAHUm+A3wWeFtVPTys2iRJgw3z7KNzZml/84C264Hrh1WLJGluvKJZktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJrWE+eW11ki1J1vW1XZjkR0lub16/0jftA0nuSXJ3klcNqy5J0uyGuaVwBXD6gPZLq2pZ8/oiQJIT6D2m8wXNPJfNPLNZkjQ6QwuFqroFmOtzls8Arqmqx6vqfuAeYPmwapMkDdbFMYULktzR7F46pGk7EvhhX5+NTdtTJFmZZCrJ1PT09LBrlaSxMupQuBw4FlgGbAIuadozoG8NWkBVraqqyaqanJiYGEqRkjSuRhoKVbW5qrZV1RPAJ3hyF9FG4Oi+rkcBD46yNknSiEMhyeK+0dcCM2cm3QicneTAJMcAS4FbR1mbJAn2H9aCk1wNnAIclmQj8CHglCTL6O0aegA4H6Cq1ie5DrgL2Aq8o6q2Das2SdJgQwuFqjpnQPMnd9L/IuCiYdUjSdo1r2iWJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSa2ihkGR1ki1J1vW1XZzku0nuSHJDkuc27UuSPJbk9ub18WHVJUma3TC3FK4ATt+hbQ3wwqo6Efhb4AN90+6tqmXN621DrEuSNIuhhUJV3QI8vEPbl6tqazP6DeCoYa1fkrT7ujym8BvAl/rGj0ny7SRfSfKK2WZKsjLJVJKp6enp4VcpSWOkk1BI8rvAVuBTTdMm4HlVdRLwXuDTSQ4eNG9VraqqyaqanJiYGE3BkjQmRh4KSVYAvwqcW1UFUFWPV9WPm+G1wL3AcaOuTZLG3UhDIcnpwH8GXlNVj/a1TyRZ1Aw/H1gK3DfK2iRJsP+wFpzkauAU4LAkG4EP0Tvb6EBgTRKAbzRnGv0C8PtJtgLbgLdV1cMDFyxJGpo5hUKSm6rqtF219auqcwY0f3KWvtcD18+lFknS8Ow0FJI8E3gWvV/7hwBpJh0M/PMh1yZJGrFdbSmcD7ybXgCs5clQ+Cnwx8MrS5LUhZ2GQlV9FPhokndW1cdGVJMkqSNzOqZQVR9L8nJgSf88VXXVkOqSJHVgrgea/ww4Frid3tlBAAUYCpK0D5nrKamTwAkzF5tJkvZNc714bR3wz4ZZiCSpe3PdUjgMuCvJrcDjM41V9ZqhVCVJ6sRcQ+HCYRYhSVoY5nr20VeGXYgkqXtzPfvoEXpnGwE8AzgA+H9VNfD21pKkvdNctxSe3T+e5Exg+TAKkiR1Z49unV1Vfw784vyWIknq2lx3H72ub3Q/etcteM2CJO1j5nr20a/1DW8FHgDOmPdqJEmdmusxhbcMuxBJUvfmdEwhyVFJbkiyJcnmJNcnOWoX86xu+q/razs0yZok32veD+mb9oEk9yS5O8mr9vwjSZL21FwPNP8pcCO95yocCXyhaduZK4DTd2h7P3BTVS0FbmrGSXICcDbwgmaey2ae2SxJGp25hsJEVf1pVW1tXlcAEzuboapuAXZ8zvIZwJXN8JXAmX3t11TV41V1P3APnvIqSSM311B4KMmvJ1nUvH4d+PEerO+IqtoE0Lwf3rQfCfywr9/Gpu0pkqxMMpVkanp6eg9KkCTNZq6h8BvAG4D/C2wCXg/M58HnDGgbeMprVa2qqsmqmpyY2OnGiiRpN801FP4bsKKqJqrqcHohceEerG9zksUAzfuWpn0jcHRfv6OAB/dg+ZKkp2GuoXBiVf3dzEhVPQyctAfruxFY0QyvAD7f1352kgOTHAMsBW7dg+VLkp6GuV68tl+SQ2aCIcmhu5o3ydXAKcBhSTYCHwI+DFyX5DzgB8BZAFW1Psl1wF30Lo57R1VtG7jgefa+L/lEUT3VJa9+U9clSJ2YayhcAvxNks/S29f/BuCinc1QVefMMum0WfpftKtlSpKGa65XNF+VZIreTfACvK6q7hpqZZKkkZvrlgJNCBgEkrQP26NbZ0uS9k2GgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpNedbZ8+XJMcD1/Y1PR/4PeC5wFuB6ab9g1X1xdFWJ0njbeShUFV3A8sAkiwCfgTcALwFuLSq/nDUNUmSerrefXQacG9Vfb/jOiRJdB8KZwNX941fkOSOJKuTHDJohiQrk0wlmZqenh7URZK0hzoLhSTPAF4DfKZpuhw4lt6upU3AJYPmq6pVVTVZVZMTExOjKFWSxkaXWwqvBr5VVZsBqmpzVW2rqieATwDLO6xNksZSl6FwDn27jpIs7pv2WmDdyCuSpDE38rOPAJI8C/gl4Py+5j9Isgwo4IEdpkmSRqCTUKiqR4F/ukPbG7uoRZL0pK7PPpIkLSCGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSp1dWT1x4AHgG2AVurajLJocC1wBJ6T157Q1X9XRf1SdK46nJL4dSqWlZVk834+4GbqmopcFMzLkkaoYW0++gM4Mpm+ErgzO5KkaTx1FUoFPDlJGuTrGzajqiqTQDN++GDZkyyMslUkqnp6ekRlStJ46GTYwrAyVX1YJLDgTVJvjvXGatqFbAKYHJysoZVoCSNo062FKrqweZ9C3ADsBzYnGQxQPO+pYvaJGmcjTwUkvxMkmfPDAO/DKwDbgRWNN1WAJ8fdW2SNO662H10BHBDkpn1f7qq/iLJbcB1Sc4DfgCc1UFtkjTWRh4KVXUf8KIB7T8GTht1PZKkJy2kU1IlSR0zFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJrS4ex3l0kpuTbEiyPsm7mvYLk/woye3N61dGXZskjbsuHse5FXhfVX2reVbz2iRrmmmXVtUfdlCTJIluHse5CdjUDD+SZANw5KjrkCQ9VafHFJIsAU4Cvtk0XZDkjiSrkxwyyzwrk0wlmZqenh5VqZI0FjoLhSQHAdcD766qnwKXA8cCy+htSVwyaL6qWlVVk1U1OTExMapyJWksdBIKSQ6gFwifqqrPAVTV5qraVlVPAJ8AlndRmySNsy7OPgrwSWBDVX2kr31xX7fXAutGXZskjbsuzj46GXgjcGeS25u2DwLnJFkGFPAAcH4HtUnSWOvi7KOvARkw6YujrkWStD2vaJYktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVJrwYVCktOT3J3kniTv77oeSRonCyoUkiwC/hh4NXACvUd0ntBtVZI0PhZUKADLgXuq6r6q+kfgGuCMjmuSpLEx8mc078KRwA/7xjcCP9/fIclKYGUz+g9J7h5RbePgMOChrotYCD7Ciq5L0Pb825zxmxfPx1L+xWwTFlooZEBbbTdStQpYNZpyxkuSqaqa7LoOaUf+bY7OQtt9tBE4um/8KODBjmqRpLGz0ELhNmBpkmOSPAM4G7ix45okaWwsqN1HVbU1yQXAXwKLgNVVtb7jssaJu+W0UPm3OSKpql33kiSNhYW2+0iS1CFDQZLUMhTkrUW0YCVZnWRLknVd1zIuDIUx561FtMBdAZzedRHjxFCQtxbRglVVtwAPd13HODEUNOjWIkd2VIukjhkK2uWtRSSND0NB3lpEUstQkLcWkdQyFMZcVW0FZm4tsgG4zluLaKFIcjXwdeD4JBuTnNd1Tfs6b3MhSWq5pSBJahkKkqSWoSBJahkKkqSWoSBJahkKmndJfjfJ+iR3JLk9yc/P03I/m+T5zfCLk9zZ3Nn1fyYZdGX27i7/rCQbktz89KuddR1vTvJHT2P+v0jy90n+93zWtZs1XJjkt3fR54IkbxlVTZo/hoLmVZKXAb8K/OuqOhF4JdvfW2lPl/sCYFFV3dc0XQ6sBJY2r/m4k+Z5wG9W1anzsKxhuRh4Y9dFzMFq4Le6LkK7z1DQfFsMPFRVjwNU1UNV9SC0v+6/kmRtkr9MsjjJc5pnORzf9Lk6yVsHLPdc4PNNn8XAwVX19epdaHMVcObTKTrJ7wH/Bvh4kouTLGreb2u2eM5v+p3SfIbrkvxtkg8nOTfJrc2Wy7FNv19L8s0k307yV0mOGLDOiSTXN+u4LcnJu6qzqm4CHnman/XNSf48yReS3N/8qn9vU+s3khza9HtrU9d3mjqfNWBZxzZbL2uTfDXJzzZ1Pgo8kGT506lVo2coaL59GTi6+cK8LMm/BUhyAPAx4PVV9WJ6vyQvqqqf0Lui+ookZwOHVNUnBiz3ZGBtM3wkvXs2zRh4Z9ckpza7r3Z8/c2Ofavq94Ep4Nyq+k/0thp+UlUvAV4CvDXJMU33FwHvAv4VvV/tx1XVcuBPgHc2fb4GvLSqTqJ3O/LfGfCZPgpc2qzj3zXz75Ekl87yWWd7aNILgf9A79bpFwGPNrV+HXhT0+dzVfWSqnoRvavdB11NvAp4Z/Nv+tvAZX3TpoBX7OlnUjf277oA7Vuq6h+SvJjel8GpwLXNF9MUvS+iNc3u/0XApmaeNUnOovewnxfNsujFwHQzPKc7u1bVzcCyPfwovwycmOT1zfhz6O2m+kfgtqraBJDkXnpBCHAnvc8MvRsLXtts1TwDuH/AOl4JnNB3OOTgJM+uqt3eEqiq9+zmLDc363kkyU+ALzTtdwInNsMvTPLfgecCB9G7FUoryUHAy4HP9H2GA/u6bAF+djfrUscMBc27qtoG/DXw10nuBFbQ+5W/vqpetmP/JPsBPwc8BhzK9lsBMx4DntkMb6T3pTtj4J1dk5wKXDpgWY9W1ct38TFC7xfwjl+EpwCP9zU90Tf+BE/+P/Ux4CNVdWMzz4UD1rEf8LKqemwXtexSkkt5MpD6XVNVHx7QPpfPcAVwZlV9J8mbgVN2WMZ+wN9X1bJZynomvX837UXcfaR5leT4JEv7mpYB3wfuBiaaA9EkOaA5eAzwHnq7J84BVje7mna0AfiXAM2v9EeSvLQ56+hNNMcb+lXVzVW1bMBrV4EAvV/Fb5+pJclxSX5mDvPNeA7wo2Z4xSx9vkxv1xnNOpY178uTXLUb66Kq3jPLZx0UCHP1bGBT89/g3AHr/Clwf7OVR3r6t/SOA3y28l7GUNB8Owi4MsldSe6g99znC5tHfb4e+B9JvgPcDrw8yXHAfwTeV1VfBW4B/suA5f4ftv+l+nZ6++DvAe4FvjTPn+NPgLuAb6X30Pj/xe5tWV9Ib7fKV4GHZunzW8BkcyD7LuBtTfvzmOUXdrO8zwCnpXfX0FftRk27678C3wTWAN+dpc+5wHnNv+l6tn+U68nAXw2xPg2Bd0nVXiHJPwFuBk5udk/ts5JcDPxZVd3RdS17KslJwHuram84fVZ9DAXtNZpfxRuq6gdd16KdS/JLwPeq6oGua9HuMRQkSS2PKUiSWoaCJKllKEiSWoaCJKllKEiSWv8fb3+kPDcEOqIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#sex\n",
    "df.sex.value_counts()\n",
    "sns.countplot(x='sex',data=df,palette=\"Set2\")\n",
    "plt.xlabel(\"Sex (0 = female, 1= male)\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "beae4f59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#age and target\n",
    "plt.figure(figsize=(18,7))\n",
    "sns.countplot(x='age',data = df, hue = 'target',palette='PuBuGn',saturation=0.8)\n",
    "plt.xticks(fontsize=13)\n",
    "plt.yticks(fontsize=13)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1e2e57f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>ca</th>\n",
       "      <th>...</th>\n",
       "      <th>cp_1</th>\n",
       "      <th>cp_2</th>\n",
       "      <th>cp_3</th>\n",
       "      <th>slope_0</th>\n",
       "      <th>slope_1</th>\n",
       "      <th>slope_2</th>\n",
       "      <th>thal_0</th>\n",
       "      <th>thal_1</th>\n",
       "      <th>thal_2</th>\n",
       "      <th>thal_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  ca  ...  \\\n",
       "0   63    1       145   233    1        0      150      0      2.3   0  ...   \n",
       "1   37    1       130   250    0        1      187      0      3.5   0  ...   \n",
       "2   41    0       130   204    0        0      172      0      1.4   0  ...   \n",
       "\n",
       "   cp_1  cp_2  cp_3  slope_0  slope_1  slope_2  thal_0  thal_1  thal_2  thal_3  \n",
       "0     0     0     1        1        0        0       0       1       0       0  \n",
       "1     0     1     0        1        0        0       0       0       1       0  \n",
       "2     1     0     0        0        0        1       0       0       1       0  \n",
       "\n",
       "[3 rows x 22 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dummy variables\n",
    "first = pd.get_dummies(df['cp'], prefix = \"cp\")\n",
    "second = pd.get_dummies(df['slope'], prefix = \"slope\")\n",
    "thrid = pd.get_dummies(df['thal'], prefix = \"thal\")\n",
    "df = pd.concat([df,first,second,thrid], axis = 1)\n",
    "df = df.drop(columns = ['cp', 'slope', 'thal'])\n",
    "df.head(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9f4c1b0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(303, 21)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df.target.values\n",
    "X = df.drop(['target'], axis = 1)\n",
    "X.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c9b80485",
   "metadata": {},
   "outputs": [],
   "source": [
    "#split the data and scale it \n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=1)  \n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "standardScaler = StandardScaler()\n",
    "standardScaler.fit(X_train)\n",
    "X_train = standardScaler.transform(X_train)\n",
    "X_test = standardScaler.transform(X_test) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0c6132e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(multi_class='ovr', n_jobs=1, solver='liblinear')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#logistic Regression \n",
    "\n",
    "from sklearn.linear_model import LogisticRegression \n",
    "\n",
    "log_reg = LogisticRegression()\n",
    "log_reg.fit(X_train,y_train)\n",
    "\n",
    "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
    "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
    "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
    "          verbose=0, warm_start=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a3af52ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8766519823788547"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg.score(X_train,y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cb2b199d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.75"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg.score(X_test,y_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ee178f65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.75"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg.score(X_test,y_test)\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "y_predict_log = log_reg.predict(X_test)\n",
    "\n",
    "accuracy_score(y_test,y_predict_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "91205cf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#search for better model\n",
    "param_grid = [\n",
    "    {\n",
    "        'C':[0.01,0.1,1,10,100],\n",
    "        'penalty':['l2','l1'],\n",
    "        'class_weight':['balanced',None]\n",
    "    }\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "eef9a13d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "grid_search = GridSearchCV(log_reg,param_grid,cv=10,n_jobs=-1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "673745cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 210 ms, sys: 117 ms, total: 327 ms\n",
      "Wall time: 2.83 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/wanglishan/opt/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_search.py:918: UserWarning: One or more of the test scores are non-finite: [0.85573123        nan 0.86027668        nan 0.85533597        nan\n",
      " 0.84664032        nan 0.81996047        nan 0.82905138        nan\n",
      " 0.81996047        nan 0.81561265        nan 0.81996047        nan\n",
      " 0.81561265        nan]\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, estimator=LogisticRegression(), n_jobs=-1,\n",
       "             param_grid=[{'C': [0.01, 0.1, 1, 10, 100],\n",
       "                          'class_weight': ['balanced', None],\n",
       "                          'penalty': ['l2', 'l1']}])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "grid_search.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1f0451b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=0.01, multi_class='ovr', n_jobs=1, solver='liblinear')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_estimator_\n",
    "LogisticRegression(C=0.01, class_weight=None, dual=False, fit_intercept=True,\n",
    "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
    "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
    "          verbose=0, warm_start=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bc51a1a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8602766798418973"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_score_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e5dffeb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 0.01, 'class_weight': None, 'penalty': 'l2'}"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_params_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "3cc40131",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8766519823788547"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg = grid_search.best_estimator_\n",
    "log_reg.score(X_train,y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c903128e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7894736842105263"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg.score(X_test,y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6f65372a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7764705882352942"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# f1 score\n",
    "from sklearn.metrics import f1_score\n",
    "\n",
    "f1_score(y_test,y_predict_log)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6cceacb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.69      0.72        35\n",
      "           1       0.75      0.80      0.78        41\n",
      "\n",
      "    accuracy                           0.75        76\n",
      "   macro avg       0.75      0.75      0.75        76\n",
      "weighted avg       0.75      0.75      0.75        76\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,y_predict_log))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ab7691d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[24, 11],\n",
       "       [ 8, 33]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#confusion_matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cnf_matrix = confusion_matrix(y_test,y_predict_log)\n",
    "cnf_matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "528a8901",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n",
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_cnf_matirx(cnf_matrix,description):\n",
    "    class_names = [0,1]\n",
    "    fig,ax = plt.subplots()\n",
    "    tick_marks = np.arange(len(class_names))\n",
    "    plt.xticks(tick_marks,class_names)\n",
    "    plt.yticks(tick_marks,class_names)\n",
    "\n",
    "#create a heat map\n",
    "    sns.heatmap(pd.DataFrame(cnf_matrix), annot = True, cmap = 'OrRd',\n",
    "               fmt = 'g')\n",
    "    ax.xaxis.set_label_position('top')\n",
    "    plt.tight_layout()\n",
    "    plt.title(description, y = 1.1,fontsize=16)\n",
    "    plt.ylabel('reality0/1',fontsize=12)\n",
    "    plt.xlabel('predict0/1',fontsize=12)\n",
    "    plt.show()\n",
    "    \n",
    "plot_cnf_matirx(cnf_matrix,'Confusion matrix -- Logistic Regression')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "0f9ef9ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "decision_scores = log_reg.decision_function(X_test)\n",
    "\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "\n",
    "precisions,recalls,thresholds = precision_recall_curve(y_test,decision_scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "27c56f31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(thresholds,precisions[:-1])\n",
    "plt.plot(thresholds,recalls[:-1])\n",
    "plt.grid()\n",
    "plt.show()    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "06480977",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ROC\n",
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "fprs,tprs,thresholds = roc_curve(y_test,decision_scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "496ba0d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n",
      "/Users/wanglishan/opt/anaconda3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:238: RuntimeWarning: Glyph 26354 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/wanglishan/opt/anaconda3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:238: RuntimeWarning: Glyph 32447 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans.\n",
      "/Users/wanglishan/opt/anaconda3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:201: RuntimeWarning: Glyph 26354 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/wanglishan/opt/anaconda3/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py:201: RuntimeWarning: Glyph 32447 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_roc_curve(fprs,tprs):\n",
    "    plt.figure(figsize=(8,6),dpi=80)\n",
    "    plt.plot(fprs,tprs)\n",
    "    plt.plot([0,1],linestyle='--')\n",
    "    plt.xticks(fontsize=13)\n",
    "    plt.yticks(fontsize=13)\n",
    "    plt.ylabel('TP rate',fontsize=15)\n",
    "    plt.xlabel('FP rate',fontsize=15)\n",
    "    plt.title('ROC曲线',fontsize=17)\n",
    "    plt.show()\n",
    "    \n",
    "plot_roc_curve(fprs,tprs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "35de9e5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8808362369337979"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score  \n",
    "\n",
    "roc_auc_score(y_test,decision_scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b785591",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
